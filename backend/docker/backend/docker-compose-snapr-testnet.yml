version: '3.7'

services:
  #
  # snapr node
  #
  substrate-node:
    image: snapr-tesnet/latest
    hostname: substrate-node
    build: ./snapr-tesnet
    volumes:
      - 'substrate-data:/data'
    ports:
      - '30333:30333'
      - '9933:9933'
      - '9944:9944'
    expose:
      - '9944'
    command: -d /data --chain /data/chain_spec_testnet.json --pruning=archive --rpc-cors "*" --ws-port 9944 --port 30333 --unsafe-ws-external --no-prometheus --name snapr-systems-explorer --telemetry-url 'wss://telemetry.snapr.systems/submit/ 0'
    restart: always

  #
  # SQL data base
  #
  postgres:
    image: postgres
    restart: always
    volumes:
      - 'db-data:/var/lib/postgresql/data'
      - './sql/backend.sql:/docker-entrypoint-initdb.d/backend.sql'
    environment:
      DB_USER: 'snapr'
      DB_PASSWORD: 'snapr'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U snapr']
      interval: 5s
      timeout: 5s
      retries: 5
  #
  # Hasura GraphQL server
  #
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3
    ports:
      - '8082:8080'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: mysql://snapr:snapr@mysql:3306/snapr
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false' # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
  #
  # Chain crawler
  #
  crawler:
    image: crawler:latest
    build:
      context: ../../
      dockerfile: ./docker/backend/crawler/Dockerfile
    depends_on:
      - 'postgres'
      - 'substrate-node'
    restart: always
    environment:
      - NODE_ENV=production
      - WS_PROVIDER_URL=ws://substrate-node:9944
      - SUBSTRATE_NETWORK=snapr
      # - CRAWLER_BLOCK_LISTENER_DISABLE=true
      # - CRAWLER_BLOCK_HARVESTER_DISABLE=true


  #
  # smart contract verifier api
  #
  smart-contract-verifier-api:
    image: smart-contract-verifier-api:latest
    ports:
      - '8000:8000'
    build:
      context: ../../../smart-contract-verifier-api
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
    restart: always
    environment:
      - NODE_ENV=production
      - NODE_PORT=8000
      - RECAPTCHA_SECRET=6LfNcPIaAAAAADSldnLXXxSrXIYH532l0cSsfDEU

  #
  # smart contract verifier
  #
  smart-contract-verifier:
    image: smart-contract-verifier:latest
    build:
      context: ../../../smart-contract-verifier
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
    restart: always

#
# Persistent volumes
#
volumes:
  db-data: {}
  substrate-data: {}
